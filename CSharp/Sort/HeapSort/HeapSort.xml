<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HeapSort</name>
    </assembly>
    <members>
        <member name="P:HeapSort.Heap`1.Meter">
            <summary>Optional Sort Performance Meter</summary>
        </member>
        <member name="P:HeapSort.Heap`1.IsAscending">
            <summary>Heap sense</summary>
        </member>
        <member name="P:HeapSort.Heap`1.Entries">
            <summary>Entries array</summary>
        </member>
        <member name="P:HeapSort.Heap`1.Length">
            <summary>Length of Entries array</summary>
            <value>Entries array Length</value>
        </member>
        <member name="P:HeapSort.Heap`1.Count">
            <summary>Count of entries currently in use</summary>
        </member>
        <member name="M:HeapSort.Heap`1.SetCount(System.Int32)">
            <summary>Perform Heap operations appropriate to setting the new value of Count</summary>
            <param name="count"># of entries to use</param>
        </member>
        <member name="M:HeapSort.Heap`1.#ctor(SortTest.IMeter,`0[],System.Int32,System.Boolean)">
            <summary>Heap Constructor</summary>
            <param name="entries">Entries array</param>
            <param name="count"># of entries to use in Heap</param>
            <param name="ascending">Initial Heap sense</param>
        </member>
        <member name="M:HeapSort.Heap`1.#ctor(SortTest.IMeter,`0[])">
            <summary>Heap Constructor</summary>
            <param name="entries">Entries array</param>
        </member>
        <member name="M:HeapSort.Heap`1.#ctor(SortTest.IMeter)">
            <summary>Heap Constructor</summary>
        </member>
        <member name="M:HeapSort.Heap`1.CopyTo(HeapSort.Heap{`0})">
            <summary>Deep Copy</summary>
            <param name="target">Target Heap</param>
        </member>
        <member name="M:HeapSort.Heap`1.#ctor(HeapSort.Heap{`0})">
            <summary>Copy Constructor</summary>
            <param name="heap">Heap to copy</param>
        </member>
        <member name="M:HeapSort.Heap`1.Clone">
            <summary>Clone Heap</summary>
            <returns>Clone of current Heap</returns>
        </member>
        <member name="M:HeapSort.Heap`1.Parent(System.Int32)">
            <summary>Index of parent</summary>
            <param name="child">Child index</param>
        </member>
        <member name="M:HeapSort.Heap`1.Left(System.Int32)">
            <summary>Index of left child</summary>
            <param name="parent">Parent index</param>
            <remarks>right = left + 1</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.SiftDown(`0,System.Int32)">
            <summary>Used internally by Build() to add the entry at the Root Index.</summary>
            <remarks>O(n): Assumes both children are valid Heaps.</remarks>
            <param name="value">Value to add</param>
            <param name="root">Interim Root</param>
        </member>
        <member name="M:HeapSort.Heap`1.Build(System.Int32)">
            <summary>Rearrange Entries into a Heap.</summary>
            <param name="count"># of entries to use</param>
            <remarks>O(n)</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.Invert">
            <summary>Invert Heap sense.</summary>
            <remarks>O(n)</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.SiftUp(`0)">
            <summary>Add new element to a Heap.</summary>
            <remarks>O(n): Not required for a HeapSort.</remarks>
            <param name="value">Value to add</param>
        </member>
        <member name="M:HeapSort.Heap`1.Extend(System.Int32)">
            <summary>Extend the Heap with additional entries.</summary>
            <param name="count"># of entries to use</param>
        </member>
        <member name="M:HeapSort.Heap`1.Truncate(System.Int32)">
            <summary>Truncate the Heap to the specified number of entries.</summary>
            <param name="count"># of entries to use</param>
        </member>
        <member name="M:HeapSort.Heap`1.Remove">
            <summary>Remove root.</summary>
            <remarks>O(n)</remarks>
            <returns>Value of root entry</returns>
        </member>
        <member name="M:HeapSort.Heap`1.Sort">
            <summary>Perform HeapSort on the Entries array</summary>
            <remarks>O(n log n)</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.ReverseSort">
            <summary>Perform Reverse HeapSort on the Entries array</summary>
            <remarks>O(n log n)</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.Swap(`0@,`0@)">
            <summary>Swap two entities of type T.</summary>
        </member>
        <member name="M:HeapSort.Heap`1.Swap(`0[],System.Int32,System.Int32)">
            <summary>Swap entries at the left and right indicies.</summary>
            <param name="entries"></param>
            <param name="left">Left index</param>
            <param name="right">Right index</param>
        </member>
        <member name="M:HeapSort.Heap`1.Reverse">
            <summary>Reverse Entries and Invert Heap sense</summary>
            <remarks>O(n): May be used after Sort() to restore Heap sense</remarks>
        </member>
        <member name="M:HeapSort.Heap`1.GetEnumerator">
             <summary>Generic Heap enumerator</summary>
             <remarks>
             This non-standard Enumerator allows efficient removal of elements in priority
             order.  Entries are temporarily removed while the Enumeration is in progress.
            
             Once the final element has been removed, the count is reestablished and Heap Elements
             appear in Reverse Order.  This improves performance; but IsAscending must be inverted
             to restore the original Heap sense.
             </remarks>
             <returns>Generic enumerator</returns>
        </member>
        <member name="M:HeapSort.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get non-generic enumerator</summary>
            <remarks>Explicit implementation</remarks>
            <returns>Non-generic enumerator</returns>
        </member>
    </members>
</doc>
